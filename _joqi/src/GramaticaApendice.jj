options{  STATIC = false;  IGNORE_CASE = true;  OUTPUT_DIRECTORY = "br\\com\\joqi\\parser";  TEXT = false;}PARSER_BEGIN(Parser)package br.com.joqi.parser;import java.io.StringReader;import br.com.joqi.semantico.consulta.Query;import br.com.joqi.semantico.consulta.QueryUtils;import br.com.joqi.semantico.consulta.agrupamento.agregacao.Avg;import br.com.joqi.semantico.consulta.agrupamento.agregacao.Count;import br.com.joqi.semantico.consulta.agrupamento.agregacao.FuncaoAgregacao;import br.com.joqi.semantico.consulta.agrupamento.agregacao.Max;import br.com.joqi.semantico.consulta.agrupamento.agregacao.Min;import br.com.joqi.semantico.consulta.agrupamento.agregacao.Sum;import br.com.joqi.semantico.consulta.ordenacao.ItemOrdenacao.TipoOrdenacao;import br.com.joqi.semantico.consulta.projecao.Projecao;import br.com.joqi.semantico.consulta.projecao.ProjecaoAritmetica;import br.com.joqi.semantico.consulta.projecao.ProjecaoBooleana;import br.com.joqi.semantico.consulta.projecao.ProjecaoCampo;import br.com.joqi.semantico.consulta.projecao.ProjecaoDate;import br.com.joqi.semantico.consulta.projecao.ProjecaoFuncaoAgregacao;import br.com.joqi.semantico.consulta.projecao.ProjecaoString;import br.com.joqi.semantico.consulta.relacao.Relacao;import br.com.joqi.semantico.consulta.restricao.IPossuiRestricoes;import br.com.joqi.semantico.consulta.restricao.Restricao;import br.com.joqi.semantico.consulta.restricao.RestricaoConjunto;import br.com.joqi.semantico.consulta.restricao.RestricaoSimples;import br.com.joqi.semantico.consulta.restricao.operadorlogico.OperadorLogico;import br.com.joqi.semantico.consulta.restricao.operadorlogico.OperadorLogicoAnd;import br.com.joqi.semantico.consulta.restricao.operadorlogico.OperadorLogicoOr;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.Diferente;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.Entre;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.Igual;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.IgualBooleano;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.IgualParcial;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.Maior;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.MaiorIgual;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.Menor;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.MenorIgual;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.Nulo;import br.com.joqi.semantico.consulta.restricao.operadorrelacional.OperadorRelacional;import br.com.joqi.semantico.consulta.util.JoqiUtil;import br.com.joqi.semantico.exception.ClausulaFromException;import br.com.joqi.semantico.exception.RelacaoInexistenteException;public class Parser{  private Query query = null;  public Parser(Query query, String queryString)  {    this (new StringReader(queryString));    this.query = query;  }}PARSER_END(Parser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < SELECT : "select" >| < FROM : "from" >| < WHERE : "where" >| < HAVING : "having" >| < GROUP_BY : "group by" >| < ORDER_BY : "order by" >| < ASC : "asc" >| < DESC : "desc" >| < AND : "and" >| < OR : "or" >| < NOT : "not" >| < LIKE : "like" >| < IS : "is" >| < NULL : "null" >| < TRUE : "true" >| < FALSE : "false" >| < AS : "as" >| < BETWEEN : "between" >| < RANGE : "range" >}TOKEN :{  < COUNT : "count" >| < SUM : "sum" >| < AVG : "avg" >| < MIN : "min" >| < MAX : "max" >}TOKEN :{  < DATE : "date" >}TOKEN :{  < MAIS : "+" >| < MENOS : "-" >| < MULTIPLICA : "*" >| < DIVIDE : "/" >| < IGUAL : "=" >| < MAIOR : ">" >| < MENOR : "<" >| < MAIOR_IGUAL : ">=" >| < MENOR_IGUAL : "<=" >| < DIFERENTE : "<>" >}TOKEN :{  < PONTO : "." >| < VIRGULA : "," >| < PONTO_E_VIRGULA : ";" >| < ASPA : "'" >| < ABRE_PARENTESE : "(" >| < FECHA_PARENTESE : ")" >}TOKEN :{  < #DIGITOS : ([ "0"-"9" ])+ >| < NUMERO : < DIGITOS > (< PONTO > < DIGITOS >)? >| < #INICIO_IDENTIFICADOR : [ "a"-"z", "A"-"Z", "_" ] >| < IDENTIFICADOR :    < INICIO_IDENTIFICADOR >    (      < INICIO_IDENTIFICADOR >    | < DIGITOS >    )* >| < TEXTO : < ASPA > (~[ "'" ])* < ASPA > >}double expressaoAritmeticaAux() :{  Token token;  double retorno;}{  (    token = < NUMERO >    {      retorno = Double.valueOf(token.image);    }  )  {    return retorno;  }}double expressaoAritmetica() :{  double retorno;}{  retorno = multiplicacaoDivisao()  (    < MAIS >    {      retorno += multiplicacaoDivisao();    }  | < MENOS >    {      retorno -= multiplicacaoDivisao();    }  )*  {    return retorno;  }}double multiplicacaoDivisao() :{  double retorno;}{  retorno = expressaoAritmeticaAux()  (    < MULTIPLICA >    {      retorno *= expressaoAritmeticaAux();    }  | < DIVIDE >    {      retorno /= expressaoAritmeticaAux();    }  )*  {    return retorno;  }}FuncaoAgregacao funcaoAgregacao() :{  FuncaoAgregacao funcao;}{  (    < COUNT >    {      funcao = new Count();    }  | < SUM >    {      funcao = new Sum();    }  | < MIN >    {      funcao = new Min();    }  | < MAX >    {      funcao = new Max();    }  | < AVG >    {      funcao = new Avg();    }  )  < ABRE_PARENTESE >  projecaoCampo()  < FECHA_PARENTESE >  {    return funcao;  }}ProjecaoCampo projecaoCampo() :{  Token relacao = null;  Token nome = null;}{  (    LOOKAHEAD(2)    relacao = < IDENTIFICADOR > < PONTO > nome = < IDENTIFICADOR >  | nome = < IDENTIFICADOR >  )  {    ProjecaoCampo projecao = new ProjecaoCampo(nome.image);    if (relacao != null)    {      projecao.setRelacao(relacao.image);    }    return projecao;  }}ProjecaoAritmetica projecaoAritmetica() :{  double valorExpressao;}{  valorExpressao = expressaoAritmetica()  {    return new ProjecaoAritmetica(valorExpressao);  }}ProjecaoString projecaoString() :{  Token texto;}{  texto = < TEXTO >  {    return new ProjecaoString(texto.image);  }}ProjecaoDate projecaoDate() :{  ProjecaoString dataStr;}{  < DATE > < ABRE_PARENTESE > dataStr = projecaoString() < FECHA_PARENTESE >  {    return new ProjecaoDate(JoqiUtil.asDate(dataStr.getValor()));  }}ProjecaoFuncaoAgregacao projecaoFuncaoAgregacao() :{}{  funcaoAgregacao()	  {  	    return new ProjecaoFuncaoAgregacao();  }}Relacao relacao() :{  Token nome = null;  Token apelido = null;}{  nome = < IDENTIFICADOR >  [    [ < AS > ] apelido = < IDENTIFICADOR >  ]  {    Relacao relacao = new Relacao(nome.image);    if (apelido != null)    {      relacao.setApelido(apelido.image);    }    return relacao;  }}Projecao operando() :{  Projecao operando;}{  (    operando = projecaoCampo()  | operando = projecaoAritmetica()  | operando = projecaoString()  | operando = projecaoDate()  )  {    return operando;  }}RestricaoSimples restricao(boolean negacao, OperadorLogico operadorLogico) :{  Projecao operando1;  Projecao operando2;  Projecao operandoAux;  OperadorRelacional operadorRelacional;}{  operando1 = operando()  (    (      (        < IGUAL >        {          operadorRelacional = new Igual();        }      | < MAIOR >        {          operadorRelacional = new Maior();        }      | < MENOR >        {          operadorRelacional = new Menor();        }      | < MAIOR_IGUAL >        {          operadorRelacional = new MaiorIgual();        }      | < MENOR_IGUAL >        {          operadorRelacional = new MenorIgual();        }      | < DIFERENTE >        {          operadorRelacional = new Diferente();        }      | < LIKE >        {          operadorRelacional = new IgualParcial();        }      |        (          < BETWEEN >          {            operadorRelacional = new Entre(operando1);          }          operando1 = operando() < AND >        )      )      operando2 = operando()    )  |    (      < IS >      (        (          < NULL >          {            operadorRelacional = new Nulo();            operando2 = new ProjecaoString(null);          }        )      |        (          (            < TRUE >            {              operando2 = new ProjecaoBooleana(true);            }          | < FALSE >            {              operando2 = new ProjecaoBooleana(false);            }          )          {            operadorRelacional = new IgualBooleano();          }        )      )    )  )  {    return new RestricaoSimples(negacao, operando1, operando2, operadorRelacional, operadorLogico);  }}Projecao projecao() :{  Projecao projecao;  Token apelido = null;}{  (    projecao = projecaoCampo()  | projecao = projecaoAritmetica()  | projecao = projecaoString()  | projecao = projecaoDate()  | projecao = projecaoFuncaoAgregacao()  )  [    [ < AS > ] apelido = < IDENTIFICADOR >  ]  {    if (apelido != null)    {      projecao.setApelido(apelido.image);    }    return projecao;  }}void select() :{}{  < SELECT > projecao()  (    < VIRGULA > projecao()  )*}void from() throws ClausulaFromException, RelacaoInexistenteException :{}{  < FROM > relacao()  (    < VIRGULA > relacao()  )*}void where() :{}{  < WHERE > restricoes(null)}void restricoes(RestricaoConjunto restricaoConjunto) :{  OperadorLogico operadorLogico;}{  restricoesAux(null, restricaoConjunto)  (    (      < AND >      {        operadorLogico = new OperadorLogicoAnd();      }    | < OR >      {        operadorLogico = new OperadorLogicoOr();      }    )    restricoesAux(operadorLogico, restricaoConjunto)  )*}void restricoesAux(OperadorLogico operadorLogico, RestricaoConjunto restricaoConjuntoMae) :{  RestricaoSimples restricaoSimples = null;  RestricaoConjunto restricaoConjunto = null;  boolean negacao = false;}{  [    < NOT >    {      negacao = true;    }  ]  (    LOOKAHEAD(operando())    (      restricaoSimples = restricao(negacao, operadorLogico)      {        IPossuiRestricoes listaRestricoes = restricaoConjuntoMae;        if (restricaoConjuntoMae == null)        {          listaRestricoes = query;        }        //         if (restricaoSimples.getOperadorRelacional().getClass() == Entre.class)        {          RestricaoSimples [ ] betweenSeparado = QueryUtils.divideRestricaoBetween(restricaoSimples);          //          listaRestricoes.addRestricao(betweenSeparado [ 0 ]);          listaRestricoes.addRestricao(betweenSeparado [ 1 ]);        }        else        {          listaRestricoes.addRestricao(restricaoSimples);        }      }    )  |    (      {        restricaoConjunto = new RestricaoConjunto(negacao, operadorLogico);      }      < ABRE_PARENTESE > restricoes(restricaoConjunto) < FECHA_PARENTESE >      {        if (restricaoConjunto.getRestricoes().size() > 0)        {          Restricao restricaoAdicionar = restricaoConjunto;          if (restricaoConjunto.getRestricoes().size() == 1)          {            Restricao restricaoUnica = restricaoConjunto.getRestricoes().get(0);            if (restricaoUnica.getClass() == RestricaoSimples.class)            {              restricaoSimples = (RestricaoSimples) restricaoUnica;              restricaoSimples.setOperadorLogico(restricaoConjunto.getOperadorLogico());              restricaoAdicionar = restricaoSimples;            }          }          //          if (restricaoConjuntoMae != null)          {            restricaoConjuntoMae.addRestricao(restricaoAdicionar);          }          else          {            query.addRestricao(restricaoAdicionar);          }        }      }    )  )}TipoOrdenacao tipoOrdenacao() :{}{  [    < ASC >    {      return TipoOrdenacao.ASC;    }  | < DESC >    {      return TipoOrdenacao.DESC;    }  ]  {    return TipoOrdenacao.ASC;  }}void orderBy() :{}{  < ORDER_BY > operando() tipoOrdenacao()  (    < VIRGULA > operando() tipoOrdenacao()  )*}void groupBy() :{}{  < GROUP_BY > operando()  (    < VIRGULA > operando()  )*}void range() :{  Double min = null;  Double max = null;}{  < RANGE > min = expressaoAritmetica() [ < VIRGULA > max = expressaoAritmetica() ]  {    if (max != null)    {      query.setMin(min.intValue());      query.setMax(max.intValue());    }    else    {      query.setMin(1);      query.setMax(min.intValue());    }  }}void executa() throws ClausulaFromException, RelacaoInexistenteException :{}{  [ select() ] from() [ where() ] [ groupBy() ] [ orderBy() ] [ range() ] [ < PONTO_E_VIRGULA > ] < EOF >}